create database Edu_Hub;
 
use Edu_Hub;
 
create table Users(userId int primary key identity(1,1),

userName varchar(255) not null unique,password varchar(15) not null check (LEN(password) between 8 and 15),

role  varchar(255) not null check(role in('Student','Educator')),email varchar(255) not null,

mobile_no varchar(10) not null,profileImage varchar(255));
 
 
create table Courses(courseId int primary key identity(1,1),

title varchar(255) not null,description varchar(255) not null,

courseStartDate Date, courseEndDate Date,userId int,category varchar(255),level varchar(255) check(level in('beginner', 'intermediate','advanced')));
 
create table Enrollments(enrollmentId int primary key identity(1,1),

userId int , courseId int, enrollmentDate date, status varchar(25)default 'Pending' check(status in ('Accepted', 'Rejected','Pending')));
 
create table Materials(materialId int primary key identity(1,1),

courseId int, title varchar(255), description varchar(255),URL varchar(255),uploadDate date,contentType varchar(255));
 
create table Enquiries(enquiryId int primary key identity(1,1),

userId int,courseId int, subject varchar(255), message varchar(255),enquiryDate date,status varchar(255)default 'Open' check(status in('Open','Closed')),response varchar(255));
 
 
create table Feedbacks(feedbackId int identity(1,1),

userId int,CourseId int,feedback varchar(255),date date);
 
select * from sys.tables;
 
select * from users;

select  * from Courses;

select  * from Materials;

select  * from Enrollments;

select  * from Enquiries;

select  * from Feedbacks;


 
create procedure [dbo].[SP_FeedbackCourses]

(@userId int)

as

begin

   select e.feedbackId, c.title,e.feedback, e.date,p.Username,e.CourseID

			from Feedbacks as e inner join Users as p on e.userId = p.userId inner join Courses as c on c.courseId = e.CourseID

		where c.userid = @userId;

end;
 
GO
 


create procedure [dbo].[SP_GetCoursesByUserId](@userid int)

as

Select * from Courses where userId =@userid;

GO

 